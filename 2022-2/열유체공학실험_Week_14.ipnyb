{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "3S8iCnL2X110",
        "fgkqw2GzYEM3",
        "-kS82st_YEM4",
        "HzIp9pJfYEM5",
        "Fp1UJo8aYEM6",
        "GZ1YnQFxYEM6",
        "UihxdpHnYEM7",
        "NDFEoDj3YEM8",
        "WSo0jUN7YEM8",
        "WYiK7JJKYEM9",
        "TdsAdCQPYEM9",
        "35KPpDWzYEM-",
        "1ftRxvlmYEM_",
        "4IP_c242BG8P",
        "7q2hYA46BI5E",
        "aIjHgMO9BOYn",
        "0UEu5iRABS8t",
        "W-PPnMKSBUcs",
        "dXXDw3xfCR4M",
        "YldOi8woDlxv",
        "PjlEM3MPDVPu",
        "s2Xr6K10DuWL",
        "bXgWpzySFmlm",
        "xw-T1YWAB7Mp",
        "h7AAV9yHEhCs",
        "bcVVU25RGIPh",
        "sl1oRu9LGTKm",
        "c_Uu4DP3GUQK",
        "KPp9vs38Ga2o",
        "7u52_rL7OyDt",
        "RQa-hTVKOzMR",
        "dTu1E2fyO1sN",
        "EUjj10GIO22c",
        "sPFx6bLOQjC8",
        "r1smPLHePYqb",
        "AwJs6eXIPYqc",
        "UUEOhPayPYqc",
        "cxjHEMQIPYqd",
        "UaZ3GiE1PYqd",
        "omN65FzkPYqd",
        "Yz9eOkoQPYqd",
        "UGuwvVmoPYqe",
        "QMAcx7tLPYqe",
        "y7UKcIuGXD34",
        "kaN4W99CXD35",
        "_d1a6QqXXD36",
        "ttOeeyrMXD36",
        "AYwJKLJOXD37",
        "l4oZfWdqXD38",
        "7ujTaO2jXD38",
        "lDaQGJfLXD39",
        "ggrmh54mXD3-",
        "Rj-2yIycXD3_",
        "33JM0ClFn833",
        "9kKabtBto0vX",
        "xgmB78pNo0vY",
        "2eauQ4x0o0vY",
        "Gd6Z6JjMo0vY",
        "DwK2TRmUo0vZ",
        "KrbIouMXo0vZ",
        "qZ4r-lpHo0va",
        "7vu60Uk6o0va"
      ],
      "authorship_tag": "ABX9TyNjoWYkWBLd1G9p2P1jJK9W",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JK-the-Ko/Thermo-Fluid-Dynamics-Experiment/blob/main/2022-2/%EC%97%B4%EC%9C%A0%EC%B2%B4%EA%B3%B5%ED%95%99%EC%8B%A4%ED%97%98_Week_14.ipnyb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Time Series Data Analysis"
      ],
      "metadata": {
        "id": "ewR4dzqSBEBh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Import Library"
      ],
      "metadata": {
        "id": "9sYRT_gaBF64"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "BI7MKZZV3_iP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Harmonic Function"
      ],
      "metadata": {
        "id": "b73l0IHsXvTK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.sin(np.arange(0, 1e3, 1e-1))"
      ],
      "metadata": {
        "id": "sZbuuweQX3UA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Processing for Neural Network"
      ],
      "metadata": {
        "id": "zC1t77meX11y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Get Number of Input"
      ],
      "metadata": {
        "id": "w0QAQw3xX11y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numInput = 50\n",
        "numOutput = 10"
      ],
      "metadata": {
        "id": "3QArIZsAX11y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Add Data"
      ],
      "metadata": {
        "id": "5XAlIwhSX11z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inputData, targetData = [], []\n",
        "\n",
        "for i in range(len(x)-numInput-numOutput) :\n",
        "  inputData.append(x[i:i+numInput])\n",
        "  targetData.append(x[i+numInput:i+numInput+numOutput])"
      ],
      "metadata": {
        "id": "PUun1WkTX11z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "inputData, targetData = np.array(inputData), np.array(targetData)"
      ],
      "metadata": {
        "id": "l8o17x2eX11z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Show Dataset"
      ],
      "metadata": {
        "id": "JXarjNo6X11z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inputDF = pd.DataFrame(data=inputData, columns=[f\"Input_{i}\" for i in range(numInput)])\n",
        "targetDF = pd.DataFrame(data=targetData, columns=[f\"Target{i}\" for i in range(numOutput)])"
      ],
      "metadata": {
        "id": "pbLq-6xBX11z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "inputDF.head(5)"
      ],
      "metadata": {
        "id": "KcEzUg0iX11z",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "outputId": "ba6dd8e6-d0b1-4624-ab78-8ecb59ce32ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Input_0   Input_1   Input_2   Input_3   Input_4   Input_5   Input_6  \\\n",
              "0  0.000000  0.099833  0.198669  0.295520  0.389418  0.479426  0.564642   \n",
              "1  0.099833  0.198669  0.295520  0.389418  0.479426  0.564642  0.644218   \n",
              "2  0.198669  0.295520  0.389418  0.479426  0.564642  0.644218  0.717356   \n",
              "3  0.295520  0.389418  0.479426  0.564642  0.644218  0.717356  0.783327   \n",
              "4  0.389418  0.479426  0.564642  0.644218  0.717356  0.783327  0.841471   \n",
              "\n",
              "    Input_7   Input_8   Input_9  ...  Input_40  Input_41  Input_42  Input_43  \\\n",
              "0  0.644218  0.717356  0.783327  ... -0.756802 -0.818277 -0.871576 -0.916166   \n",
              "1  0.717356  0.783327  0.841471  ... -0.818277 -0.871576 -0.916166 -0.951602   \n",
              "2  0.783327  0.841471  0.891207  ... -0.871576 -0.916166 -0.951602 -0.977530   \n",
              "3  0.841471  0.891207  0.932039  ... -0.916166 -0.951602 -0.977530 -0.993691   \n",
              "4  0.891207  0.932039  0.963558  ... -0.951602 -0.977530 -0.993691 -0.999923   \n",
              "\n",
              "   Input_44  Input_45  Input_46  Input_47  Input_48  Input_49  \n",
              "0 -0.951602 -0.977530 -0.993691 -0.999923 -0.996165 -0.982453  \n",
              "1 -0.977530 -0.993691 -0.999923 -0.996165 -0.982453 -0.958924  \n",
              "2 -0.993691 -0.999923 -0.996165 -0.982453 -0.958924 -0.925815  \n",
              "3 -0.999923 -0.996165 -0.982453 -0.958924 -0.925815 -0.883455  \n",
              "4 -0.996165 -0.982453 -0.958924 -0.925815 -0.883455 -0.832267  \n",
              "\n",
              "[5 rows x 50 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3bc403da-2013-472b-85d0-134f0d79b0d6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Input_0</th>\n",
              "      <th>Input_1</th>\n",
              "      <th>Input_2</th>\n",
              "      <th>Input_3</th>\n",
              "      <th>Input_4</th>\n",
              "      <th>Input_5</th>\n",
              "      <th>Input_6</th>\n",
              "      <th>Input_7</th>\n",
              "      <th>Input_8</th>\n",
              "      <th>Input_9</th>\n",
              "      <th>...</th>\n",
              "      <th>Input_40</th>\n",
              "      <th>Input_41</th>\n",
              "      <th>Input_42</th>\n",
              "      <th>Input_43</th>\n",
              "      <th>Input_44</th>\n",
              "      <th>Input_45</th>\n",
              "      <th>Input_46</th>\n",
              "      <th>Input_47</th>\n",
              "      <th>Input_48</th>\n",
              "      <th>Input_49</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.099833</td>\n",
              "      <td>0.198669</td>\n",
              "      <td>0.295520</td>\n",
              "      <td>0.389418</td>\n",
              "      <td>0.479426</td>\n",
              "      <td>0.564642</td>\n",
              "      <td>0.644218</td>\n",
              "      <td>0.717356</td>\n",
              "      <td>0.783327</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.756802</td>\n",
              "      <td>-0.818277</td>\n",
              "      <td>-0.871576</td>\n",
              "      <td>-0.916166</td>\n",
              "      <td>-0.951602</td>\n",
              "      <td>-0.977530</td>\n",
              "      <td>-0.993691</td>\n",
              "      <td>-0.999923</td>\n",
              "      <td>-0.996165</td>\n",
              "      <td>-0.982453</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.099833</td>\n",
              "      <td>0.198669</td>\n",
              "      <td>0.295520</td>\n",
              "      <td>0.389418</td>\n",
              "      <td>0.479426</td>\n",
              "      <td>0.564642</td>\n",
              "      <td>0.644218</td>\n",
              "      <td>0.717356</td>\n",
              "      <td>0.783327</td>\n",
              "      <td>0.841471</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.818277</td>\n",
              "      <td>-0.871576</td>\n",
              "      <td>-0.916166</td>\n",
              "      <td>-0.951602</td>\n",
              "      <td>-0.977530</td>\n",
              "      <td>-0.993691</td>\n",
              "      <td>-0.999923</td>\n",
              "      <td>-0.996165</td>\n",
              "      <td>-0.982453</td>\n",
              "      <td>-0.958924</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.198669</td>\n",
              "      <td>0.295520</td>\n",
              "      <td>0.389418</td>\n",
              "      <td>0.479426</td>\n",
              "      <td>0.564642</td>\n",
              "      <td>0.644218</td>\n",
              "      <td>0.717356</td>\n",
              "      <td>0.783327</td>\n",
              "      <td>0.841471</td>\n",
              "      <td>0.891207</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.871576</td>\n",
              "      <td>-0.916166</td>\n",
              "      <td>-0.951602</td>\n",
              "      <td>-0.977530</td>\n",
              "      <td>-0.993691</td>\n",
              "      <td>-0.999923</td>\n",
              "      <td>-0.996165</td>\n",
              "      <td>-0.982453</td>\n",
              "      <td>-0.958924</td>\n",
              "      <td>-0.925815</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.295520</td>\n",
              "      <td>0.389418</td>\n",
              "      <td>0.479426</td>\n",
              "      <td>0.564642</td>\n",
              "      <td>0.644218</td>\n",
              "      <td>0.717356</td>\n",
              "      <td>0.783327</td>\n",
              "      <td>0.841471</td>\n",
              "      <td>0.891207</td>\n",
              "      <td>0.932039</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.916166</td>\n",
              "      <td>-0.951602</td>\n",
              "      <td>-0.977530</td>\n",
              "      <td>-0.993691</td>\n",
              "      <td>-0.999923</td>\n",
              "      <td>-0.996165</td>\n",
              "      <td>-0.982453</td>\n",
              "      <td>-0.958924</td>\n",
              "      <td>-0.925815</td>\n",
              "      <td>-0.883455</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.389418</td>\n",
              "      <td>0.479426</td>\n",
              "      <td>0.564642</td>\n",
              "      <td>0.644218</td>\n",
              "      <td>0.717356</td>\n",
              "      <td>0.783327</td>\n",
              "      <td>0.841471</td>\n",
              "      <td>0.891207</td>\n",
              "      <td>0.932039</td>\n",
              "      <td>0.963558</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.951602</td>\n",
              "      <td>-0.977530</td>\n",
              "      <td>-0.993691</td>\n",
              "      <td>-0.999923</td>\n",
              "      <td>-0.996165</td>\n",
              "      <td>-0.982453</td>\n",
              "      <td>-0.958924</td>\n",
              "      <td>-0.925815</td>\n",
              "      <td>-0.883455</td>\n",
              "      <td>-0.832267</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 50 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3bc403da-2013-472b-85d0-134f0d79b0d6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3bc403da-2013-472b-85d0-134f0d79b0d6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3bc403da-2013-472b-85d0-134f0d79b0d6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "targetDF.head(5)"
      ],
      "metadata": {
        "id": "eRCtu7LiX110",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "6b034a77-8ddc-4099-8e33-4361c215a54b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Target0   Target1   Target2   Target3   Target4   Target5   Target6  \\\n",
              "0 -0.958924 -0.925815 -0.883455 -0.832267 -0.772764 -0.705540 -0.631267   \n",
              "1 -0.925815 -0.883455 -0.832267 -0.772764 -0.705540 -0.631267 -0.550686   \n",
              "2 -0.883455 -0.832267 -0.772764 -0.705540 -0.631267 -0.550686 -0.464602   \n",
              "3 -0.832267 -0.772764 -0.705540 -0.631267 -0.550686 -0.464602 -0.373877   \n",
              "4 -0.772764 -0.705540 -0.631267 -0.550686 -0.464602 -0.373877 -0.279415   \n",
              "\n",
              "    Target7   Target8   Target9  \n",
              "0 -0.550686 -0.464602 -0.373877  \n",
              "1 -0.464602 -0.373877 -0.279415  \n",
              "2 -0.373877 -0.279415 -0.182163  \n",
              "3 -0.279415 -0.182163 -0.083089  \n",
              "4 -0.182163 -0.083089  0.016814  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b7108a09-7ef3-4592-97b6-39bc61eca062\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Target0</th>\n",
              "      <th>Target1</th>\n",
              "      <th>Target2</th>\n",
              "      <th>Target3</th>\n",
              "      <th>Target4</th>\n",
              "      <th>Target5</th>\n",
              "      <th>Target6</th>\n",
              "      <th>Target7</th>\n",
              "      <th>Target8</th>\n",
              "      <th>Target9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.958924</td>\n",
              "      <td>-0.925815</td>\n",
              "      <td>-0.883455</td>\n",
              "      <td>-0.832267</td>\n",
              "      <td>-0.772764</td>\n",
              "      <td>-0.705540</td>\n",
              "      <td>-0.631267</td>\n",
              "      <td>-0.550686</td>\n",
              "      <td>-0.464602</td>\n",
              "      <td>-0.373877</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.925815</td>\n",
              "      <td>-0.883455</td>\n",
              "      <td>-0.832267</td>\n",
              "      <td>-0.772764</td>\n",
              "      <td>-0.705540</td>\n",
              "      <td>-0.631267</td>\n",
              "      <td>-0.550686</td>\n",
              "      <td>-0.464602</td>\n",
              "      <td>-0.373877</td>\n",
              "      <td>-0.279415</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.883455</td>\n",
              "      <td>-0.832267</td>\n",
              "      <td>-0.772764</td>\n",
              "      <td>-0.705540</td>\n",
              "      <td>-0.631267</td>\n",
              "      <td>-0.550686</td>\n",
              "      <td>-0.464602</td>\n",
              "      <td>-0.373877</td>\n",
              "      <td>-0.279415</td>\n",
              "      <td>-0.182163</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.832267</td>\n",
              "      <td>-0.772764</td>\n",
              "      <td>-0.705540</td>\n",
              "      <td>-0.631267</td>\n",
              "      <td>-0.550686</td>\n",
              "      <td>-0.464602</td>\n",
              "      <td>-0.373877</td>\n",
              "      <td>-0.279415</td>\n",
              "      <td>-0.182163</td>\n",
              "      <td>-0.083089</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.772764</td>\n",
              "      <td>-0.705540</td>\n",
              "      <td>-0.631267</td>\n",
              "      <td>-0.550686</td>\n",
              "      <td>-0.464602</td>\n",
              "      <td>-0.373877</td>\n",
              "      <td>-0.279415</td>\n",
              "      <td>-0.182163</td>\n",
              "      <td>-0.083089</td>\n",
              "      <td>0.016814</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b7108a09-7ef3-4592-97b6-39bc61eca062')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b7108a09-7ef3-4592-97b6-39bc61eca062 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b7108a09-7ef3-4592-97b6-39bc61eca062');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Split Dataset"
      ],
      "metadata": {
        "id": "3S8iCnL2X110"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "trainRatio = 0.8\n",
        "trainSize = int(inputData.shape[0]*trainRatio)\n",
        "validSize = (inputData.shape[0]-trainSize)//2"
      ],
      "metadata": {
        "id": "uUNrVpOmX110"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "trainSize"
      ],
      "metadata": {
        "id": "rc7G8QYwX110",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f827ed05-4a46-45b7-a73f-35661b35d20d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7952"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xTrain, yTrain = inputData[:trainSize], targetData[:trainSize]\n",
        "xValid, yValid = inputData[trainSize:trainSize+validSize], targetData[trainSize:trainSize+validSize]\n",
        "xTest, yTest = inputData[trainSize+validSize:], targetData[trainSize+validSize:]"
      ],
      "metadata": {
        "id": "LJbcfw-4X110"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Recurrent Neural Network (RNN)"
      ],
      "metadata": {
        "id": "fgkqw2GzYEM3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Import Keras Library"
      ],
      "metadata": {
        "id": "-kS82st_YEM4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow import keras"
      ],
      "metadata": {
        "id": "pVanUNB7YEM4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Fix Seed"
      ],
      "metadata": {
        "id": "HzIp9pJfYEM5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from keras import backend as K\n",
        "import random\n",
        "\n",
        "def fixSeed(numSeed = 42) :\n",
        "  np.random.seed(numSeed)\n",
        "  random.seed(numSeed)\n",
        "  tf.random.set_seed(numSeed)\n",
        "\n",
        "  sessionConf = tf.compat.v1.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\n",
        "  sess = tf.compat.v1.Session(graph=tf.compat.v1.get_default_graph(), config=sessionConf)\n",
        "  K.set_session(sess)"
      ],
      "metadata": {
        "id": "9ASYVpwvYEM5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Create RNN Network"
      ],
      "metadata": {
        "id": "Fp1UJo8aYEM6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "K.clear_session()\n",
        "fixSeed()\n",
        "\n",
        "model = keras.Sequential()\n",
        "\n",
        "model.add(keras.layers.SimpleRNN(50, input_shape=(numInput, 1)))\n",
        "model.add(keras.layers.Dense(numOutput))"
      ],
      "metadata": {
        "id": "YJhyqfxhYEM6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Summarize Model"
      ],
      "metadata": {
        "id": "GZ1YnQFxYEM6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "id": "kKMnhZBPYEM7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9f2be4a5-1f89-4454-e051-ab75716cf4f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " simple_rnn (SimpleRNN)      (None, 50)                2600      \n",
            "                                                                 \n",
            " dense (Dense)               (None, 10)                510       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 3,110\n",
            "Trainable params: 3,110\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Model"
      ],
      "metadata": {
        "id": "UihxdpHnYEM7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.utils import plot_model\n",
        "plot_model(model, to_file=\"model.png\")"
      ],
      "metadata": {
        "id": "qLX0jEiaYEM7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "outputId": "4ce1962e-3eb1-4bf0-da3b-b637db9940d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Compile Model"
      ],
      "metadata": {
        "id": "NDFEoDj3YEM8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lr, batchSize, epoch = 1e-3, 1024, 100"
      ],
      "metadata": {
        "id": "wGWXgN5VYEM8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss=\"mean_absolute_error\", optimizer=keras.optimizers.Adam(learning_rate=lr))"
      ],
      "metadata": {
        "id": "J459rNTAYEM8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train Model"
      ],
      "metadata": {
        "id": "WSo0jUN7YEM8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(xTrain, yTrain, batch_size=batchSize, epochs=epoch, validation_data=(xValid, yValid))"
      ],
      "metadata": {
        "id": "PBBSEJ2nYEM9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b55c6025-4244-4b9d-f997-6240852622fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "8/8 [==============================] - 6s 157ms/step - loss: 0.5843 - val_loss: 0.4278\n",
            "Epoch 2/100\n",
            "8/8 [==============================] - 1s 87ms/step - loss: 0.3455 - val_loss: 0.2622\n",
            "Epoch 3/100\n",
            "8/8 [==============================] - 1s 130ms/step - loss: 0.2132 - val_loss: 0.1598\n",
            "Epoch 4/100\n",
            "8/8 [==============================] - 1s 95ms/step - loss: 0.1347 - val_loss: 0.1033\n",
            "Epoch 5/100\n",
            "8/8 [==============================] - 1s 96ms/step - loss: 0.0854 - val_loss: 0.0574\n",
            "Epoch 6/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0517 - val_loss: 0.0428\n",
            "Epoch 7/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0395 - val_loss: 0.0341\n",
            "Epoch 8/100\n",
            "8/8 [==============================] - 0s 42ms/step - loss: 0.0300 - val_loss: 0.0261\n",
            "Epoch 9/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0264 - val_loss: 0.0290\n",
            "Epoch 10/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0230 - val_loss: 0.0218\n",
            "Epoch 11/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0173 - val_loss: 0.0156\n",
            "Epoch 12/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0154 - val_loss: 0.0118\n",
            "Epoch 13/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0134 - val_loss: 0.0190\n",
            "Epoch 14/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0165 - val_loss: 0.0324\n",
            "Epoch 15/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0250 - val_loss: 0.0166\n",
            "Epoch 16/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0154 - val_loss: 0.0131\n",
            "Epoch 17/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0133 - val_loss: 0.0137\n",
            "Epoch 18/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0118 - val_loss: 0.0086\n",
            "Epoch 19/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0092 - val_loss: 0.0075\n",
            "Epoch 20/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0105 - val_loss: 0.0103\n",
            "Epoch 21/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0111 - val_loss: 0.0097\n",
            "Epoch 22/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0086 - val_loss: 0.0126\n",
            "Epoch 23/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0090 - val_loss: 0.0068\n",
            "Epoch 24/100\n",
            "8/8 [==============================] - 0s 44ms/step - loss: 0.0196 - val_loss: 0.0358\n",
            "Epoch 25/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0227 - val_loss: 0.0179\n",
            "Epoch 26/100\n",
            "8/8 [==============================] - 0s 37ms/step - loss: 0.0158 - val_loss: 0.0167\n",
            "Epoch 27/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0142 - val_loss: 0.0071\n",
            "Epoch 28/100\n",
            "8/8 [==============================] - 0s 43ms/step - loss: 0.0144 - val_loss: 0.0098\n",
            "Epoch 29/100\n",
            "8/8 [==============================] - 0s 37ms/step - loss: 0.0163 - val_loss: 0.0098\n",
            "Epoch 30/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0085 - val_loss: 0.0110\n",
            "Epoch 31/100\n",
            "8/8 [==============================] - 0s 43ms/step - loss: 0.0099 - val_loss: 0.0086\n",
            "Epoch 32/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0082 - val_loss: 0.0092\n",
            "Epoch 33/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0085 - val_loss: 0.0148\n",
            "Epoch 34/100\n",
            "8/8 [==============================] - 0s 42ms/step - loss: 0.0150 - val_loss: 0.0072\n",
            "Epoch 35/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0152 - val_loss: 0.0238\n",
            "Epoch 36/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0227 - val_loss: 0.0137\n",
            "Epoch 37/100\n",
            "8/8 [==============================] - 0s 44ms/step - loss: 0.0251 - val_loss: 0.0240\n",
            "Epoch 38/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0230 - val_loss: 0.0176\n",
            "Epoch 39/100\n",
            "8/8 [==============================] - 0s 37ms/step - loss: 0.0207 - val_loss: 0.0085\n",
            "Epoch 40/100\n",
            "8/8 [==============================] - 0s 42ms/step - loss: 0.0192 - val_loss: 0.0340\n",
            "Epoch 41/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0211 - val_loss: 0.0221\n",
            "Epoch 42/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0204 - val_loss: 0.0124\n",
            "Epoch 43/100\n",
            "8/8 [==============================] - 0s 43ms/step - loss: 0.0164 - val_loss: 0.0131\n",
            "Epoch 44/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0123 - val_loss: 0.0095\n",
            "Epoch 45/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0094 - val_loss: 0.0135\n",
            "Epoch 46/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0105 - val_loss: 0.0120\n",
            "Epoch 47/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0102 - val_loss: 0.0104\n",
            "Epoch 48/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0108 - val_loss: 0.0066\n",
            "Epoch 49/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0085 - val_loss: 0.0114\n",
            "Epoch 50/100\n",
            "8/8 [==============================] - 0s 43ms/step - loss: 0.0100 - val_loss: 0.0110\n",
            "Epoch 51/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0098 - val_loss: 0.0101\n",
            "Epoch 52/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0100 - val_loss: 0.0065\n",
            "Epoch 53/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0069 - val_loss: 0.0057\n",
            "Epoch 54/100\n",
            "8/8 [==============================] - 0s 43ms/step - loss: 0.0069 - val_loss: 0.0122\n",
            "Epoch 55/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0111 - val_loss: 0.0083\n",
            "Epoch 56/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0111 - val_loss: 0.0157\n",
            "Epoch 57/100\n",
            "8/8 [==============================] - 0s 42ms/step - loss: 0.0110 - val_loss: 0.0050\n",
            "Epoch 58/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0064 - val_loss: 0.0054\n",
            "Epoch 59/100\n",
            "8/8 [==============================] - 0s 46ms/step - loss: 0.0060 - val_loss: 0.0055\n",
            "Epoch 60/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0057 - val_loss: 0.0043\n",
            "Epoch 61/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0064 - val_loss: 0.0051\n",
            "Epoch 62/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0050 - val_loss: 0.0052\n",
            "Epoch 63/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0071 - val_loss: 0.0083\n",
            "Epoch 64/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0071 - val_loss: 0.0073\n",
            "Epoch 65/100\n",
            "8/8 [==============================] - 0s 43ms/step - loss: 0.0071 - val_loss: 0.0058\n",
            "Epoch 66/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0103 - val_loss: 0.0095\n",
            "Epoch 67/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0105 - val_loss: 0.0097\n",
            "Epoch 68/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0092 - val_loss: 0.0146\n",
            "Epoch 69/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0092 - val_loss: 0.0085\n",
            "Epoch 70/100\n",
            "8/8 [==============================] - 0s 42ms/step - loss: 0.0101 - val_loss: 0.0085\n",
            "Epoch 71/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0097 - val_loss: 0.0049\n",
            "Epoch 72/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0096 - val_loss: 0.0086\n",
            "Epoch 73/100\n",
            "8/8 [==============================] - 0s 43ms/step - loss: 0.0089 - val_loss: 0.0175\n",
            "Epoch 74/100\n",
            "8/8 [==============================] - 0s 43ms/step - loss: 0.0114 - val_loss: 0.0060\n",
            "Epoch 75/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0099 - val_loss: 0.0150\n",
            "Epoch 76/100\n",
            "8/8 [==============================] - 0s 42ms/step - loss: 0.0126 - val_loss: 0.0159\n",
            "Epoch 77/100\n",
            "8/8 [==============================] - 0s 43ms/step - loss: 0.0116 - val_loss: 0.0087\n",
            "Epoch 78/100\n",
            "8/8 [==============================] - 0s 43ms/step - loss: 0.0115 - val_loss: 0.0070\n",
            "Epoch 79/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0055 - val_loss: 0.0062\n",
            "Epoch 80/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0048 - val_loss: 0.0037\n",
            "Epoch 81/100\n",
            "8/8 [==============================] - 1s 67ms/step - loss: 0.0065 - val_loss: 0.0101\n",
            "Epoch 82/100\n",
            "8/8 [==============================] - 1s 80ms/step - loss: 0.0091 - val_loss: 0.0128\n",
            "Epoch 83/100\n",
            "8/8 [==============================] - 1s 71ms/step - loss: 0.0095 - val_loss: 0.0125\n",
            "Epoch 84/100\n",
            "8/8 [==============================] - 1s 75ms/step - loss: 0.0095 - val_loss: 0.0097\n",
            "Epoch 85/100\n",
            "8/8 [==============================] - 0s 62ms/step - loss: 0.0089 - val_loss: 0.0099\n",
            "Epoch 86/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0087 - val_loss: 0.0117\n",
            "Epoch 87/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0090 - val_loss: 0.0090\n",
            "Epoch 88/100\n",
            "8/8 [==============================] - 0s 38ms/step - loss: 0.0089 - val_loss: 0.0088\n",
            "Epoch 89/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0084 - val_loss: 0.0085\n",
            "Epoch 90/100\n",
            "8/8 [==============================] - 0s 42ms/step - loss: 0.0084 - val_loss: 0.0107\n",
            "Epoch 91/100\n",
            "8/8 [==============================] - 0s 42ms/step - loss: 0.0080 - val_loss: 0.0059\n",
            "Epoch 92/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0048 - val_loss: 0.0039\n",
            "Epoch 93/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0040 - val_loss: 0.0062\n",
            "Epoch 94/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0042 - val_loss: 0.0035\n",
            "Epoch 95/100\n",
            "8/8 [==============================] - 0s 39ms/step - loss: 0.0044 - val_loss: 0.0053\n",
            "Epoch 96/100\n",
            "8/8 [==============================] - 0s 45ms/step - loss: 0.0058 - val_loss: 0.0053\n",
            "Epoch 97/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0059 - val_loss: 0.0096\n",
            "Epoch 98/100\n",
            "8/8 [==============================] - 0s 41ms/step - loss: 0.0073 - val_loss: 0.0071\n",
            "Epoch 99/100\n",
            "8/8 [==============================] - 0s 45ms/step - loss: 0.0086 - val_loss: 0.0052\n",
            "Epoch 100/100\n",
            "8/8 [==============================] - 0s 40ms/step - loss: 0.0086 - val_loss: 0.0051\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Training Procedure"
      ],
      "metadata": {
        "id": "WYiK7JJKYEM9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.subplots(figsize = (20,5))\n",
        "plt.plot(np.arange(epoch), history.history[\"loss\"], label=\"Training MAE Loss\")\n",
        "plt.plot(np.arange(epoch), history.history[\"val_loss\"], label=\"Validation MAE Loss\")\n",
        "plt.xlabel(\"# Epoch\")\n",
        "plt.ylabel(\"MAE Loss\")\n",
        "plt.title(\"Loss\")\n",
        "plt.legend(loc=\"best\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "SGIgXmG-YEM9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "outputId": "a93c84e9-3ba3-48db-e11d-15e3f3f9cece"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Inference Result"
      ],
      "metadata": {
        "id": "TdsAdCQPYEM9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "yPred = model.predict(xTest)"
      ],
      "metadata": {
        "id": "31g6xgjJYEM-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bec150fc-9694-41f5-bad9-90618ad0198e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "32/32 [==============================] - 0s 8ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "yPred.shape"
      ],
      "metadata": {
        "id": "Ozq-__sKYEM-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "64e2bd02-3b0c-4c15-b151-cf67f54fa3b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(994, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Result"
      ],
      "metadata": {
        "id": "35KPpDWzYEM-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.subplots(figsize = (20,5))\n",
        "plt.scatter(np.arange(numInput), xTest[-1].reshape(-1), label=\"Input\", marker=\".\")\n",
        "plt.scatter(np.arange(numInput, numInput+numOutput), yTest[-1].reshape(-1), label=\"Ground Truth\", marker=\"x\")\n",
        "plt.scatter(np.arange(numInput, numInput+numOutput), yPred[-1].reshape(-1), label=\"Prediction\", marker=\"^\")\n",
        "plt.xlabel(\"Time Step (1e-1s)\")\n",
        "plt.ylabel(\"Output\")\n",
        "plt.title(\"Result Comparison\")\n",
        "plt.legend(loc=\"best\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "nFrbpCMxYEM-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "outputId": "0d90e916-2958-4c04-a20d-3d4fdfa16d87"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Model Evaluation"
      ],
      "metadata": {
        "id": "1ftRxvlmYEM_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def computeMAE(pred, target) :\n",
        "  return np.abs(pred-target).mean()"
      ],
      "metadata": {
        "id": "1RiZPURLYEM_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "computeMAE(yPred, yTest)"
      ],
      "metadata": {
        "id": "o1Vx4aFrYEM_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e960cab4-3ddc-4188-a967-2c5c5ff6a813"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.005141226338541795"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Create MCK System Class"
      ],
      "metadata": {
        "id": "4IP_c242BG8P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class MCKSystem :\n",
        "  def __init__(self, mass, springStiffness, dampingCoefficient) :\n",
        "    # Initialize Variable\n",
        "    self.mass = mass\n",
        "    self.springStiffness = springStiffness\n",
        "    self.dampingCoefficient = dampingCoefficient\n",
        "    \n",
        "    # Compute Varaible\n",
        "    self.naturalFrequency = self.computeNaturalFrequency()\n",
        "    self.dampingRatio = self.computeDampingRatio()\n",
        "    self.dampedNaturalFrequency = self.computeDampedNaturalFrequency()\n",
        "\n",
        "  def computeNaturalFrequency(self) :\n",
        "    return np.sqrt(self.springStiffness/self.mass)  \n",
        "\n",
        "  def computeDampingRatio(self) :\n",
        "    return self.dampingCoefficient/(2*self.mass*self.naturalFrequency)\n",
        "\n",
        "  def computeDampedNaturalFrequency(self) :\n",
        "    return self.naturalFrequency*np.sqrt(1-np.power(self.dampingRatio, 2))\n",
        "\n",
        "  def computeDisplacement(self, x0, v0, t) :\n",
        "    return np.exp(-self.dampingRatio*self.naturalFrequency*t)*(x0*np.cos(self.dampedNaturalFrequency*t) + ((v0+self.dampingRatio*self.naturalFrequency*x0)/self.dampedNaturalFrequency)*np.sin(self.dampedNaturalFrequency*t))"
      ],
      "metadata": {
        "id": "SlPKSDDu-vn8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Create Object Instance"
      ],
      "metadata": {
        "id": "7q2hYA46BI5E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "m, c, k = 1e3, 10, 10\n",
        "mySystem = MCKSystem(m, c, k)"
      ],
      "metadata": {
        "id": "sQsw4Huz_wly"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Get Initial Condition and Time"
      ],
      "metadata": {
        "id": "aIjHgMO9BOYn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x0, v0 = 0, 1\n",
        "t = np.arange(0, 1e3, 1e-2)"
      ],
      "metadata": {
        "id": "SPLHmIGKAXTR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Compute Displacement"
      ],
      "metadata": {
        "id": "0UEu5iRABS8t"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = mySystem.computeDisplacement(x0, v0, t)"
      ],
      "metadata": {
        "id": "tSxkv8XUAUGE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Plot Graph"
      ],
      "metadata": {
        "id": "W-PPnMKSBUcs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.subplots(figsize = (20,5))\n",
        "plt.plot(t, x)\n",
        "plt.xlabel(\"Time (s)\")\n",
        "plt.ylabel(\"Displacement (m)\")\n",
        "plt.title(\"MCK System\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "-9xlnxaBAZHx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "outputId": "91afeadc-6f1e-4a7a-beb2-687952c55de2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Processing for Neural Network"
      ],
      "metadata": {
        "id": "dXXDw3xfCR4M"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Get Number of Input"
      ],
      "metadata": {
        "id": "YldOi8woDlxv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numInput = 500\n",
        "numOutput = 50"
      ],
      "metadata": {
        "id": "TRQQV7WjCUKU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Add Data"
      ],
      "metadata": {
        "id": "PjlEM3MPDVPu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inputData, targetData = [], []\n",
        "\n",
        "for i in range(len(x)-numInput-numOutput) :\n",
        "  inputData.append(x[i:i+numInput])\n",
        "  targetData.append(x[i+numInput:i+numInput+numOutput])"
      ],
      "metadata": {
        "id": "6vhqsZMfC7kT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "inputData, targetData = np.array(inputData), np.array(targetData)"
      ],
      "metadata": {
        "id": "4P7oXsYaDqgq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Show Dataset"
      ],
      "metadata": {
        "id": "s2Xr6K10DuWL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inputDF = pd.DataFrame(data=inputData, columns=[f\"Input_{i}\" for i in range(numInput)])\n",
        "targetDF = pd.DataFrame(data=targetData, columns=[f\"Target{i}\" for i in range(numOutput)])"
      ],
      "metadata": {
        "id": "CvFukKcSDxI-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "inputDF.head(5)"
      ],
      "metadata": {
        "id": "0QbTj7Q8EWEf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "outputId": "9a877657-a1ec-4d34-ff3d-8504acf10843"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Input_0   Input_1   Input_2   Input_3   Input_4   Input_5   Input_6  \\\n",
              "0  0.000000  0.009999  0.019998  0.029995  0.039992  0.049987  0.059982   \n",
              "1  0.009999  0.019998  0.029995  0.039992  0.049987  0.059982  0.069975   \n",
              "2  0.019998  0.029995  0.039992  0.049987  0.059982  0.069975  0.079967   \n",
              "3  0.029995  0.039992  0.049987  0.059982  0.069975  0.079967  0.089958   \n",
              "4  0.039992  0.049987  0.059982  0.069975  0.079967  0.089958  0.099948   \n",
              "\n",
              "    Input_7   Input_8   Input_9  ...  Input_490  Input_491  Input_492  \\\n",
              "0  0.069975  0.079967  0.089958  ...   4.592824   4.601204   4.609579   \n",
              "1  0.079967  0.089958  0.099948  ...   4.601204   4.609579   4.617948   \n",
              "2  0.089958  0.099948  0.109937  ...   4.609579   4.617948   4.626312   \n",
              "3  0.099948  0.109937  0.119925  ...   4.617948   4.626312   4.634670   \n",
              "4  0.109937  0.119925  0.129912  ...   4.626312   4.634670   4.643023   \n",
              "\n",
              "   Input_493  Input_494  Input_495  Input_496  Input_497  Input_498  Input_499  \n",
              "0   4.617948   4.626312   4.634670   4.643023   4.651371   4.659713   4.668049  \n",
              "1   4.626312   4.634670   4.643023   4.651371   4.659713   4.668049   4.676380  \n",
              "2   4.634670   4.643023   4.651371   4.659713   4.668049   4.676380   4.684706  \n",
              "3   4.643023   4.651371   4.659713   4.668049   4.676380   4.684706   4.693026  \n",
              "4   4.651371   4.659713   4.668049   4.676380   4.684706   4.693026   4.701340  \n",
              "\n",
              "[5 rows x 500 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6dd68049-e050-4f96-bb56-7fa72abf983f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Input_0</th>\n",
              "      <th>Input_1</th>\n",
              "      <th>Input_2</th>\n",
              "      <th>Input_3</th>\n",
              "      <th>Input_4</th>\n",
              "      <th>Input_5</th>\n",
              "      <th>Input_6</th>\n",
              "      <th>Input_7</th>\n",
              "      <th>Input_8</th>\n",
              "      <th>Input_9</th>\n",
              "      <th>...</th>\n",
              "      <th>Input_490</th>\n",
              "      <th>Input_491</th>\n",
              "      <th>Input_492</th>\n",
              "      <th>Input_493</th>\n",
              "      <th>Input_494</th>\n",
              "      <th>Input_495</th>\n",
              "      <th>Input_496</th>\n",
              "      <th>Input_497</th>\n",
              "      <th>Input_498</th>\n",
              "      <th>Input_499</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.009999</td>\n",
              "      <td>0.019998</td>\n",
              "      <td>0.029995</td>\n",
              "      <td>0.039992</td>\n",
              "      <td>0.049987</td>\n",
              "      <td>0.059982</td>\n",
              "      <td>0.069975</td>\n",
              "      <td>0.079967</td>\n",
              "      <td>0.089958</td>\n",
              "      <td>...</td>\n",
              "      <td>4.592824</td>\n",
              "      <td>4.601204</td>\n",
              "      <td>4.609579</td>\n",
              "      <td>4.617948</td>\n",
              "      <td>4.626312</td>\n",
              "      <td>4.634670</td>\n",
              "      <td>4.643023</td>\n",
              "      <td>4.651371</td>\n",
              "      <td>4.659713</td>\n",
              "      <td>4.668049</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.009999</td>\n",
              "      <td>0.019998</td>\n",
              "      <td>0.029995</td>\n",
              "      <td>0.039992</td>\n",
              "      <td>0.049987</td>\n",
              "      <td>0.059982</td>\n",
              "      <td>0.069975</td>\n",
              "      <td>0.079967</td>\n",
              "      <td>0.089958</td>\n",
              "      <td>0.099948</td>\n",
              "      <td>...</td>\n",
              "      <td>4.601204</td>\n",
              "      <td>4.609579</td>\n",
              "      <td>4.617948</td>\n",
              "      <td>4.626312</td>\n",
              "      <td>4.634670</td>\n",
              "      <td>4.643023</td>\n",
              "      <td>4.651371</td>\n",
              "      <td>4.659713</td>\n",
              "      <td>4.668049</td>\n",
              "      <td>4.676380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.019998</td>\n",
              "      <td>0.029995</td>\n",
              "      <td>0.039992</td>\n",
              "      <td>0.049987</td>\n",
              "      <td>0.059982</td>\n",
              "      <td>0.069975</td>\n",
              "      <td>0.079967</td>\n",
              "      <td>0.089958</td>\n",
              "      <td>0.099948</td>\n",
              "      <td>0.109937</td>\n",
              "      <td>...</td>\n",
              "      <td>4.609579</td>\n",
              "      <td>4.617948</td>\n",
              "      <td>4.626312</td>\n",
              "      <td>4.634670</td>\n",
              "      <td>4.643023</td>\n",
              "      <td>4.651371</td>\n",
              "      <td>4.659713</td>\n",
              "      <td>4.668049</td>\n",
              "      <td>4.676380</td>\n",
              "      <td>4.684706</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.029995</td>\n",
              "      <td>0.039992</td>\n",
              "      <td>0.049987</td>\n",
              "      <td>0.059982</td>\n",
              "      <td>0.069975</td>\n",
              "      <td>0.079967</td>\n",
              "      <td>0.089958</td>\n",
              "      <td>0.099948</td>\n",
              "      <td>0.109937</td>\n",
              "      <td>0.119925</td>\n",
              "      <td>...</td>\n",
              "      <td>4.617948</td>\n",
              "      <td>4.626312</td>\n",
              "      <td>4.634670</td>\n",
              "      <td>4.643023</td>\n",
              "      <td>4.651371</td>\n",
              "      <td>4.659713</td>\n",
              "      <td>4.668049</td>\n",
              "      <td>4.676380</td>\n",
              "      <td>4.684706</td>\n",
              "      <td>4.693026</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.039992</td>\n",
              "      <td>0.049987</td>\n",
              "      <td>0.059982</td>\n",
              "      <td>0.069975</td>\n",
              "      <td>0.079967</td>\n",
              "      <td>0.089958</td>\n",
              "      <td>0.099948</td>\n",
              "      <td>0.109937</td>\n",
              "      <td>0.119925</td>\n",
              "      <td>0.129912</td>\n",
              "      <td>...</td>\n",
              "      <td>4.626312</td>\n",
              "      <td>4.634670</td>\n",
              "      <td>4.643023</td>\n",
              "      <td>4.651371</td>\n",
              "      <td>4.659713</td>\n",
              "      <td>4.668049</td>\n",
              "      <td>4.676380</td>\n",
              "      <td>4.684706</td>\n",
              "      <td>4.693026</td>\n",
              "      <td>4.701340</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 500 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6dd68049-e050-4f96-bb56-7fa72abf983f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6dd68049-e050-4f96-bb56-7fa72abf983f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6dd68049-e050-4f96-bb56-7fa72abf983f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "targetDF.head(5)"
      ],
      "metadata": {
        "id": "uK2AEIJhpAut",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "outputId": "d6a771be-54d9-4f76-9a84-6969bd1a319b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Target0   Target1   Target2   Target3   Target4   Target5   Target6  \\\n",
              "0  4.676380  4.684706  4.693026  4.701340  4.709649  4.717952  4.726250   \n",
              "1  4.684706  4.693026  4.701340  4.709649  4.717952  4.726250  4.734543   \n",
              "2  4.693026  4.701340  4.709649  4.717952  4.726250  4.734543  4.742829   \n",
              "3  4.701340  4.709649  4.717952  4.726250  4.734543  4.742829  4.751110   \n",
              "4  4.709649  4.717952  4.726250  4.734543  4.742829  4.751110  4.759386   \n",
              "\n",
              "    Target7   Target8   Target9  ...  Target40  Target41  Target42  Target43  \\\n",
              "0  4.734543  4.742829  4.751110  ...  5.005021  5.013120  5.021213  5.029300   \n",
              "1  4.742829  4.751110  4.759386  ...  5.013120  5.021213  5.029300  5.037381   \n",
              "2  4.751110  4.759386  4.767656  ...  5.021213  5.029300  5.037381  5.045456   \n",
              "3  4.759386  4.767656  4.775920  ...  5.029300  5.037381  5.045456  5.053526   \n",
              "4  4.767656  4.775920  4.784179  ...  5.037381  5.045456  5.053526  5.061590   \n",
              "\n",
              "   Target44  Target45  Target46  Target47  Target48  Target49  \n",
              "0  5.037381  5.045456  5.053526  5.061590  5.069648  5.077700  \n",
              "1  5.045456  5.053526  5.061590  5.069648  5.077700  5.085746  \n",
              "2  5.053526  5.061590  5.069648  5.077700  5.085746  5.093786  \n",
              "3  5.061590  5.069648  5.077700  5.085746  5.093786  5.101821  \n",
              "4  5.069648  5.077700  5.085746  5.093786  5.101821  5.109849  \n",
              "\n",
              "[5 rows x 50 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2f3c348d-f79c-49f6-8e8e-6f841186cdf0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Target0</th>\n",
              "      <th>Target1</th>\n",
              "      <th>Target2</th>\n",
              "      <th>Target3</th>\n",
              "      <th>Target4</th>\n",
              "      <th>Target5</th>\n",
              "      <th>Target6</th>\n",
              "      <th>Target7</th>\n",
              "      <th>Target8</th>\n",
              "      <th>Target9</th>\n",
              "      <th>...</th>\n",
              "      <th>Target40</th>\n",
              "      <th>Target41</th>\n",
              "      <th>Target42</th>\n",
              "      <th>Target43</th>\n",
              "      <th>Target44</th>\n",
              "      <th>Target45</th>\n",
              "      <th>Target46</th>\n",
              "      <th>Target47</th>\n",
              "      <th>Target48</th>\n",
              "      <th>Target49</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4.676380</td>\n",
              "      <td>4.684706</td>\n",
              "      <td>4.693026</td>\n",
              "      <td>4.701340</td>\n",
              "      <td>4.709649</td>\n",
              "      <td>4.717952</td>\n",
              "      <td>4.726250</td>\n",
              "      <td>4.734543</td>\n",
              "      <td>4.742829</td>\n",
              "      <td>4.751110</td>\n",
              "      <td>...</td>\n",
              "      <td>5.005021</td>\n",
              "      <td>5.013120</td>\n",
              "      <td>5.021213</td>\n",
              "      <td>5.029300</td>\n",
              "      <td>5.037381</td>\n",
              "      <td>5.045456</td>\n",
              "      <td>5.053526</td>\n",
              "      <td>5.061590</td>\n",
              "      <td>5.069648</td>\n",
              "      <td>5.077700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.684706</td>\n",
              "      <td>4.693026</td>\n",
              "      <td>4.701340</td>\n",
              "      <td>4.709649</td>\n",
              "      <td>4.717952</td>\n",
              "      <td>4.726250</td>\n",
              "      <td>4.734543</td>\n",
              "      <td>4.742829</td>\n",
              "      <td>4.751110</td>\n",
              "      <td>4.759386</td>\n",
              "      <td>...</td>\n",
              "      <td>5.013120</td>\n",
              "      <td>5.021213</td>\n",
              "      <td>5.029300</td>\n",
              "      <td>5.037381</td>\n",
              "      <td>5.045456</td>\n",
              "      <td>5.053526</td>\n",
              "      <td>5.061590</td>\n",
              "      <td>5.069648</td>\n",
              "      <td>5.077700</td>\n",
              "      <td>5.085746</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.693026</td>\n",
              "      <td>4.701340</td>\n",
              "      <td>4.709649</td>\n",
              "      <td>4.717952</td>\n",
              "      <td>4.726250</td>\n",
              "      <td>4.734543</td>\n",
              "      <td>4.742829</td>\n",
              "      <td>4.751110</td>\n",
              "      <td>4.759386</td>\n",
              "      <td>4.767656</td>\n",
              "      <td>...</td>\n",
              "      <td>5.021213</td>\n",
              "      <td>5.029300</td>\n",
              "      <td>5.037381</td>\n",
              "      <td>5.045456</td>\n",
              "      <td>5.053526</td>\n",
              "      <td>5.061590</td>\n",
              "      <td>5.069648</td>\n",
              "      <td>5.077700</td>\n",
              "      <td>5.085746</td>\n",
              "      <td>5.093786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.701340</td>\n",
              "      <td>4.709649</td>\n",
              "      <td>4.717952</td>\n",
              "      <td>4.726250</td>\n",
              "      <td>4.734543</td>\n",
              "      <td>4.742829</td>\n",
              "      <td>4.751110</td>\n",
              "      <td>4.759386</td>\n",
              "      <td>4.767656</td>\n",
              "      <td>4.775920</td>\n",
              "      <td>...</td>\n",
              "      <td>5.029300</td>\n",
              "      <td>5.037381</td>\n",
              "      <td>5.045456</td>\n",
              "      <td>5.053526</td>\n",
              "      <td>5.061590</td>\n",
              "      <td>5.069648</td>\n",
              "      <td>5.077700</td>\n",
              "      <td>5.085746</td>\n",
              "      <td>5.093786</td>\n",
              "      <td>5.101821</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.709649</td>\n",
              "      <td>4.717952</td>\n",
              "      <td>4.726250</td>\n",
              "      <td>4.734543</td>\n",
              "      <td>4.742829</td>\n",
              "      <td>4.751110</td>\n",
              "      <td>4.759386</td>\n",
              "      <td>4.767656</td>\n",
              "      <td>4.775920</td>\n",
              "      <td>4.784179</td>\n",
              "      <td>...</td>\n",
              "      <td>5.037381</td>\n",
              "      <td>5.045456</td>\n",
              "      <td>5.053526</td>\n",
              "      <td>5.061590</td>\n",
              "      <td>5.069648</td>\n",
              "      <td>5.077700</td>\n",
              "      <td>5.085746</td>\n",
              "      <td>5.093786</td>\n",
              "      <td>5.101821</td>\n",
              "      <td>5.109849</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 50 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f3c348d-f79c-49f6-8e8e-6f841186cdf0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2f3c348d-f79c-49f6-8e8e-6f841186cdf0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2f3c348d-f79c-49f6-8e8e-6f841186cdf0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Split Dataset"
      ],
      "metadata": {
        "id": "bXgWpzySFmlm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "trainRatio = 0.8\n",
        "trainSize = int(inputData.shape[0]*trainRatio)\n",
        "validSize = (inputData.shape[0]-trainSize)//2"
      ],
      "metadata": {
        "id": "YLov3fwtK4r4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "trainSize"
      ],
      "metadata": {
        "id": "34D_JPIMLhbK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f6a58cf0-b624-44db-aede-d170938096ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "79560"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xTrain, yTrain = inputData[:trainSize], targetData[:trainSize]\n",
        "xValid, yValid = inputData[trainSize:trainSize+validSize], targetData[trainSize:trainSize+validSize]\n",
        "xTest, yTest = inputData[trainSize+validSize:], targetData[trainSize+validSize:]"
      ],
      "metadata": {
        "id": "sDiAzdKDLPnw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Recurrent Neural Network (RNN)"
      ],
      "metadata": {
        "id": "xw-T1YWAB7Mp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Create RNN Network"
      ],
      "metadata": {
        "id": "h7AAV9yHEhCs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "K.clear_session()\n",
        "fixSeed()\n",
        "\n",
        "model = keras.Sequential()\n",
        "\n",
        "model.add(keras.layers.SimpleRNN(50, input_shape=(numInput, 1)))\n",
        "model.add(keras.layers.Dense(numOutput))"
      ],
      "metadata": {
        "id": "qbXELi-zEzhJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Summarize Model"
      ],
      "metadata": {
        "id": "bcVVU25RGIPh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "id": "lmvAsxiEGHGO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7bf4e5d1-ffd4-4f64-a676-94155a7710ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " simple_rnn (SimpleRNN)      (None, 50)                2600      \n",
            "                                                                 \n",
            " dense (Dense)               (None, 50)                2550      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 5,150\n",
            "Trainable params: 5,150\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Model"
      ],
      "metadata": {
        "id": "sl1oRu9LGTKm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plot_model(model, to_file=\"model.png\")"
      ],
      "metadata": {
        "id": "MYVGWd71GKV_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "outputId": "c500d841-f38a-4af0-9998-24d7d2d793dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Compile Model"
      ],
      "metadata": {
        "id": "c_Uu4DP3GUQK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lr, batchSize, epoch = 1e-3, 2048, 25"
      ],
      "metadata": {
        "id": "Z7Ie7YTPGWVy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss=\"mean_absolute_error\", optimizer=keras.optimizers.Adam(learning_rate=lr))"
      ],
      "metadata": {
        "id": "aO5h7vF9GXho"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train Model"
      ],
      "metadata": {
        "id": "KPp9vs38Ga2o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(xTrain, yTrain, batch_size=batchSize, epochs=epoch, validation_data=(xValid, yValid))"
      ],
      "metadata": {
        "id": "GdtLr_FUGZ6v",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e249291-2acc-4004-bb80-f7288ba5dc0c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/25\n",
            "39/39 [==============================] - 19s 472ms/step - loss: 1.1308 - val_loss: 0.1678\n",
            "Epoch 2/25\n",
            "39/39 [==============================] - 15s 377ms/step - loss: 0.6299 - val_loss: 0.0156\n",
            "Epoch 3/25\n",
            "39/39 [==============================] - 14s 357ms/step - loss: 0.3713 - val_loss: 0.0065\n",
            "Epoch 4/25\n",
            "39/39 [==============================] - 14s 361ms/step - loss: 0.2338 - val_loss: 0.0060\n",
            "Epoch 5/25\n",
            "39/39 [==============================] - 17s 425ms/step - loss: 0.1583 - val_loss: 0.0067\n",
            "Epoch 6/25\n",
            "39/39 [==============================] - 14s 361ms/step - loss: 0.1147 - val_loss: 0.0041\n",
            "Epoch 7/25\n",
            "39/39 [==============================] - 14s 359ms/step - loss: 0.0884 - val_loss: 0.0038\n",
            "Epoch 8/25\n",
            "39/39 [==============================] - 14s 353ms/step - loss: 0.0719 - val_loss: 0.0052\n",
            "Epoch 9/25\n",
            "39/39 [==============================] - 14s 355ms/step - loss: 0.0630 - val_loss: 1.1800\n",
            "Epoch 10/25\n",
            "39/39 [==============================] - 14s 359ms/step - loss: 0.3270 - val_loss: 0.0435\n",
            "Epoch 11/25\n",
            "39/39 [==============================] - 14s 356ms/step - loss: 0.1007 - val_loss: 0.0124\n",
            "Epoch 12/25\n",
            "39/39 [==============================] - 14s 358ms/step - loss: 0.0733 - val_loss: 0.0079\n",
            "Epoch 13/25\n",
            "39/39 [==============================] - 14s 348ms/step - loss: 0.0627 - val_loss: 0.0057\n",
            "Epoch 14/25\n",
            "39/39 [==============================] - 14s 357ms/step - loss: 0.0558 - val_loss: 0.0071\n",
            "Epoch 15/25\n",
            "39/39 [==============================] - 14s 349ms/step - loss: 0.0509 - val_loss: 0.0054\n",
            "Epoch 16/25\n",
            "39/39 [==============================] - 14s 356ms/step - loss: 0.0473 - val_loss: 0.0052\n",
            "Epoch 17/25\n",
            "39/39 [==============================] - 14s 353ms/step - loss: 0.0450 - val_loss: 0.0049\n",
            "Epoch 18/25\n",
            "39/39 [==============================] - 14s 368ms/step - loss: 0.0433 - val_loss: 0.0044\n",
            "Epoch 19/25\n",
            "39/39 [==============================] - 14s 356ms/step - loss: 0.0422 - val_loss: 0.0064\n",
            "Epoch 20/25\n",
            "39/39 [==============================] - 14s 361ms/step - loss: 0.0413 - val_loss: 0.0090\n",
            "Epoch 21/25\n",
            "39/39 [==============================] - 14s 369ms/step - loss: 0.0410 - val_loss: 0.0070\n",
            "Epoch 22/25\n",
            "39/39 [==============================] - 14s 368ms/step - loss: 0.0398 - val_loss: 0.0042\n",
            "Epoch 23/25\n",
            "39/39 [==============================] - 14s 357ms/step - loss: 0.0390 - val_loss: 0.0040\n",
            "Epoch 24/25\n",
            "39/39 [==============================] - 17s 427ms/step - loss: 0.0388 - val_loss: 0.0045\n",
            "Epoch 25/25\n",
            "39/39 [==============================] - 14s 364ms/step - loss: 0.0380 - val_loss: 0.0040\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Training Procedure"
      ],
      "metadata": {
        "id": "7u52_rL7OyDt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.subplots(figsize = (20,5))\n",
        "plt.plot(np.arange(epoch), history.history[\"loss\"], label=\"Training MAE Loss\")\n",
        "plt.plot(np.arange(epoch), history.history[\"val_loss\"], label=\"Validation MAE Loss\")\n",
        "plt.xlabel(\"# Epoch\")\n",
        "plt.ylabel(\"MAE Loss\")\n",
        "plt.title(\"Loss\")\n",
        "plt.legend(loc=\"best\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Kypm9df4HGFJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "outputId": "fc819955-7431-4177-e5f0-8be88d31f916"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Inference Result"
      ],
      "metadata": {
        "id": "RQa-hTVKOzMR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "yPred = model.predict(xTest)"
      ],
      "metadata": {
        "id": "rJgRAkBBKWF1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e5df4a20-6a5f-4b19-f59d-529750df066b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "311/311 [==============================] - 11s 36ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "yPred.shape"
      ],
      "metadata": {
        "id": "Jmpv_3VSKfEA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2f11cd19-9c15-4fd7-ad60-a302daee41b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(9945, 50)"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Result"
      ],
      "metadata": {
        "id": "dTu1E2fyO1sN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.subplots(figsize = (20,5))\n",
        "plt.scatter(np.arange(numInput), xTest[-1].reshape(-1), label=\"Input\", marker=\".\")\n",
        "plt.scatter(np.arange(numInput, numInput+numOutput), yTest[-1].reshape(-1), label=\"Ground Truth\", marker=\"x\")\n",
        "plt.scatter(np.arange(numInput, numInput+numOutput), yPred[-1].reshape(-1), label=\"Prediction\", marker=\"^\")\n",
        "plt.xlabel(\"Time Step (1e-2s)\")\n",
        "plt.ylabel(\"Displacement (m)\")\n",
        "plt.title(\"Result Comparison\")\n",
        "plt.legend(loc=\"best\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Xa89FCIJKkgP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "outputId": "bc33c0da-8a65-47b9-9a0b-f917d8aa4a21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ],
            "image/png": "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fsLrr79Oa2srixYt4hOf+ATPP/88e+yxBzfccAPTp0/nmmuuYc899+Tv/u7vADjyyCO5++67ATjzzDM54YQT+MUvfsHBBx/MkiVLGDduHI2NjXziE58A4LTTTqt4zbNmzWLmzJk8+uijfOQjH2HlypW8//3v58Mf/jAAe+65J6+//jpXXHEFTz31FDNnzmTu3Lnss88+vPDCC5xxxhn8/ve/55xzzuGb3/xmt37fJEmSJEnKKTeMvDda4vJnU5W6X1NzE3PumcPRBxzN+tfXc/5h5w/5drxKWCHVUyllwqhfXZ8JoXJh1K+uzxzvZqXUb3/7W44++uiy1zzxxBPccccdPPzww1x99dX8yZ/8CStWrOBrX/sac+bM6fQZzz77LJ/61Kf47W9/y957782dd94JwMc//nG+/e1v85vf/KbL637zzTdpaGjgc5/7XMlrrr32Wk488USWL1/O5ZdfDsDy5cu59dZbWblyJbfeeitr167t8rMlSZIkScrX28PI8xXOpsqvksqvnKpbUce619fx0+d/WvTa4coKqZ6KyFRGQSaE+tX1mZ/f81e7KqZ6wac+9SkeffRRRo8ezeOPPw7A+973PiZNmgTAo48+2h4onXzyyWzatInXXnut7D1zs58AjjnmGFavXs0rr7zCK6+8wkknnQTAxz72Me65556K13nBBRd0+bsBnHLKKUycOBGAww8/nDVr1vDWt761W/eSJEmSJAl6dxh5oWKzqXKVT7nKqYWNC7lv9X0AtKbWotcOV1ZI9Yb8UCqnh2HUEUccwRNPPNH+/l//9V958MEHaWpqaj82fvz4Tu8zcuRI2tp2lSdu3769/ecxY8a0/1xTU9Mrs6jy15T/7La2Nt58882Sn6vGWiRJkiRJqoZys6nyK6fu/v3d7Gzr+L9ve3uO1WBlINUbcm16+XLte9108skns337dq6//vr2Y83NzSWvP/HEE/nBD34AQH19Pfvttx977bUXU6dObQ+2nnjiCVatWlX2uXvvvTd77703jz76KED7Pbtj6tSpNDY2AnDXXXfR0pL5G3XChAls3bq12/eVJEmSJKk/lZtN1aFyirb2yqhi1w5nBlI9lT8z6j1/BVe/knnNnynVDRHB4sWLefjhh5k2bRrHHnssc+fO5Rvf+EbR66+55hoaGxuZPn06V1xxBTfddBMA5557Lps3b+aI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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Model Evaluation"
      ],
      "metadata": {
        "id": "EUjj10GIO22c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "computeMAE(yPred, yTest)"
      ],
      "metadata": {
        "id": "R2vWzUfmO-BC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9ad58820-501a-4d5f-d65f-729ed183bae7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.004128486498828533"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Long Short-Term Memory (LSTM)"
      ],
      "metadata": {
        "id": "sPFx6bLOQjC8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Create LSTM Network"
      ],
      "metadata": {
        "id": "r1smPLHePYqb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "K.clear_session()\n",
        "fixSeed()\n",
        "\n",
        "model = keras.Sequential()\n",
        "\n",
        "model.add(keras.layers.LSTM(50, input_shape=(numInput, 1)))\n",
        "model.add(keras.layers.Dense(numOutput))"
      ],
      "metadata": {
        "id": "2wJgXrLEPYqc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Summarize Model"
      ],
      "metadata": {
        "id": "AwJs6eXIPYqc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "id": "FWWiamiSPYqc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "84b89a31-fa8c-452c-c31c-9a47d7a637d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " lstm (LSTM)                 (None, 50)                10400     \n",
            "                                                                 \n",
            " dense (Dense)               (None, 50)                2550      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 12,950\n",
            "Trainable params: 12,950\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Model"
      ],
      "metadata": {
        "id": "UUEOhPayPYqc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plot_model(model, to_file=\"model.png\")"
      ],
      "metadata": {
        "id": "_omb-BuXPYqc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "outputId": "3232d039-70b5-4791-c4c9-885e9bbe3e82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Compile Model"
      ],
      "metadata": {
        "id": "cxjHEMQIPYqd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lr, batchSize, epoch = 1e-3, 2048, 25"
      ],
      "metadata": {
        "id": "eRgdKbnDPYqd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss=\"mean_absolute_error\", optimizer=keras.optimizers.Adam(learning_rate=lr))"
      ],
      "metadata": {
        "id": "xMLKFqSqPYqd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train Model"
      ],
      "metadata": {
        "id": "UaZ3GiE1PYqd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(xTrain, yTrain, batch_size=batchSize, epochs=epoch, validation_data=(xValid, yValid))"
      ],
      "metadata": {
        "id": "qpVlI_t8PYqd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b248d293-554f-419e-fa38-faa6472962aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/25\n",
            "39/39 [==============================] - 9s 113ms/step - loss: 1.3214 - val_loss: 0.0301\n",
            "Epoch 2/25\n",
            "39/39 [==============================] - 4s 100ms/step - loss: 0.7494 - val_loss: 0.0107\n",
            "Epoch 3/25\n",
            "39/39 [==============================] - 4s 97ms/step - loss: 0.4144 - val_loss: 0.0046\n",
            "Epoch 4/25\n",
            "39/39 [==============================] - 4s 97ms/step - loss: 0.2530 - val_loss: 0.0037\n",
            "Epoch 5/25\n",
            "39/39 [==============================] - 4s 97ms/step - loss: 0.1694 - val_loss: 0.0028\n",
            "Epoch 6/25\n",
            "39/39 [==============================] - 4s 99ms/step - loss: 0.1205 - val_loss: 0.0027\n",
            "Epoch 7/25\n",
            "39/39 [==============================] - 4s 99ms/step - loss: 0.0928 - val_loss: 0.0024\n",
            "Epoch 8/25\n",
            "39/39 [==============================] - 4s 98ms/step - loss: 0.0754 - val_loss: 0.0037\n",
            "Epoch 9/25\n",
            "39/39 [==============================] - 4s 98ms/step - loss: 0.0623 - val_loss: 0.0027\n",
            "Epoch 10/25\n",
            "39/39 [==============================] - 4s 101ms/step - loss: 0.0530 - val_loss: 0.0043\n",
            "Epoch 11/25\n",
            "39/39 [==============================] - 4s 101ms/step - loss: 0.0470 - val_loss: 0.0039\n",
            "Epoch 12/25\n",
            "39/39 [==============================] - 4s 100ms/step - loss: 0.0423 - val_loss: 0.0021\n",
            "Epoch 13/25\n",
            "39/39 [==============================] - 4s 99ms/step - loss: 0.0394 - val_loss: 0.0038\n",
            "Epoch 14/25\n",
            "39/39 [==============================] - 4s 99ms/step - loss: 0.0395 - val_loss: 0.0053\n",
            "Epoch 15/25\n",
            "39/39 [==============================] - 4s 101ms/step - loss: 0.0366 - val_loss: 0.0023\n",
            "Epoch 16/25\n",
            "39/39 [==============================] - 4s 101ms/step - loss: 0.0358 - val_loss: 0.0031\n",
            "Epoch 17/25\n",
            "39/39 [==============================] - 4s 101ms/step - loss: 0.0343 - val_loss: 0.0058\n",
            "Epoch 18/25\n",
            "39/39 [==============================] - 4s 100ms/step - loss: 0.0335 - val_loss: 0.0047\n",
            "Epoch 19/25\n",
            "39/39 [==============================] - 4s 99ms/step - loss: 0.0362 - val_loss: 0.0061\n",
            "Epoch 20/25\n",
            "39/39 [==============================] - 4s 100ms/step - loss: 0.0317 - val_loss: 0.0043\n",
            "Epoch 21/25\n",
            "39/39 [==============================] - 4s 99ms/step - loss: 0.0341 - val_loss: 0.0075\n",
            "Epoch 22/25\n",
            "39/39 [==============================] - 4s 101ms/step - loss: 0.0318 - val_loss: 0.0020\n",
            "Epoch 23/25\n",
            "39/39 [==============================] - 4s 100ms/step - loss: 0.0316 - val_loss: 0.0137\n",
            "Epoch 24/25\n",
            "39/39 [==============================] - 4s 101ms/step - loss: 0.0313 - val_loss: 0.0041\n",
            "Epoch 25/25\n",
            "39/39 [==============================] - 4s 102ms/step - loss: 0.0315 - val_loss: 0.0058\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Training Procedure"
      ],
      "metadata": {
        "id": "omN65FzkPYqd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.subplots(figsize = (20,5))\n",
        "plt.plot(np.arange(epoch), history.history[\"loss\"], label=\"Training MAE Loss\")\n",
        "plt.plot(np.arange(epoch), history.history[\"val_loss\"], label=\"Validation MAE Loss\")\n",
        "plt.xlabel(\"# Epoch\")\n",
        "plt.ylabel(\"MAE Loss\")\n",
        "plt.title(\"Loss\")\n",
        "plt.legend(loc=\"best\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "LfscFBQWPYqd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "outputId": "678043fa-eb5c-400f-8194-f9b16504f318"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Inference Result"
      ],
      "metadata": {
        "id": "Yz9eOkoQPYqd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "yPred = model.predict(xTest)"
      ],
      "metadata": {
        "id": "yjr8CBR_PYqd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "49a57bab-9960-428f-9b5e-4015a2327d06"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "311/311 [==============================] - 2s 7ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "yPred.shape"
      ],
      "metadata": {
        "id": "8ijQ-xqDPYqe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5c3493ae-7695-4672-d58e-721207b902e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(9945, 50)"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Result"
      ],
      "metadata": {
        "id": "UGuwvVmoPYqe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.subplots(figsize = (20,5))\n",
        "plt.scatter(np.arange(numInput), xTest[-1].reshape(-1), label=\"Input\", marker=\".\")\n",
        "plt.scatter(np.arange(numInput, numInput+numOutput), yTest[-1].reshape(-1), label=\"Ground Truth\", marker=\"x\")\n",
        "plt.scatter(np.arange(numInput, numInput+numOutput), yPred[-1].reshape(-1), label=\"Prediction\", marker=\"^\")\n",
        "plt.xlabel(\"Time Step (1e-2s)\")\n",
        "plt.ylabel(\"Displacement (m)\")\n",
        "plt.title(\"Result Comparison\")\n",
        "plt.legend(loc=\"best\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "q0tspLEwPYqe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "outputId": "c1a72bf5-d379-476e-a06a-fec35ce11738"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Model Evaluation"
      ],
      "metadata": {
        "id": "QMAcx7tLPYqe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "computeMAE(yPred, yTest)"
      ],
      "metadata": {
        "id": "gJb_83AUPYqe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "14b47a2b-84b8-4c6c-8e1e-67d5ca9921ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.006056845360895551"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Gated Recurrent Unit (GRU)"
      ],
      "metadata": {
        "id": "y7UKcIuGXD34"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Create GRU Network"
      ],
      "metadata": {
        "id": "kaN4W99CXD35"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "K.clear_session()\n",
        "fixSeed()\n",
        "\n",
        "model = keras.Sequential()\n",
        "\n",
        "model.add(keras.layers.GRU(50, input_shape=(numInput, 1)))\n",
        "model.add(keras.layers.Dense(numOutput))"
      ],
      "metadata": {
        "id": "HFh2Vd_ZXD35"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Summarize Model"
      ],
      "metadata": {
        "id": "_d1a6QqXXD36"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "id": "pbaQDdl0XD36",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ea721a8a-b111-4dff-a71d-2864f1bf0228"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " gru (GRU)                   (None, 50)                7950      \n",
            "                                                                 \n",
            " dense (Dense)               (None, 50)                2550      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 10,500\n",
            "Trainable params: 10,500\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Model"
      ],
      "metadata": {
        "id": "ttOeeyrMXD36"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plot_model(model, to_file=\"model.png\")"
      ],
      "metadata": {
        "id": "tvG2b2MOXD36",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "outputId": "53c79d1b-ddf9-40a1-a55b-929f8812cbec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Compile Model"
      ],
      "metadata": {
        "id": "AYwJKLJOXD37"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lr, batchSize, epoch = 1e-3, 2048, 25"
      ],
      "metadata": {
        "id": "TT23eDBQXD37"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss=\"mean_absolute_error\", optimizer=keras.optimizers.Adam(learning_rate=lr))"
      ],
      "metadata": {
        "id": "_tOaEAYMXD37"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train Model"
      ],
      "metadata": {
        "id": "l4oZfWdqXD38"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(xTrain, yTrain, batch_size=batchSize, epochs=epoch, validation_data=(xValid, yValid))"
      ],
      "metadata": {
        "id": "2-R6_o6ZXD38",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "90bbc6d0-4b41-4e59-f639-1a7901926180"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/25\n",
            "39/39 [==============================] - 6s 116ms/step - loss: 1.2857 - val_loss: 0.0744\n",
            "Epoch 2/25\n",
            "39/39 [==============================] - 4s 102ms/step - loss: 0.6384 - val_loss: 0.0134\n",
            "Epoch 3/25\n",
            "39/39 [==============================] - 4s 103ms/step - loss: 0.3417 - val_loss: 0.0048\n",
            "Epoch 4/25\n",
            "39/39 [==============================] - 4s 104ms/step - loss: 0.1952 - val_loss: 0.0043\n",
            "Epoch 5/25\n",
            "39/39 [==============================] - 4s 106ms/step - loss: 0.1250 - val_loss: 0.0037\n",
            "Epoch 6/25\n",
            "39/39 [==============================] - 4s 106ms/step - loss: 0.0885 - val_loss: 0.0033\n",
            "Epoch 7/25\n",
            "39/39 [==============================] - 4s 106ms/step - loss: 0.0674 - val_loss: 0.0031\n",
            "Epoch 8/25\n",
            "39/39 [==============================] - 4s 105ms/step - loss: 0.0531 - val_loss: 0.0030\n",
            "Epoch 9/25\n",
            "39/39 [==============================] - 4s 106ms/step - loss: 0.0433 - val_loss: 0.0027\n",
            "Epoch 10/25\n",
            "39/39 [==============================] - 4s 106ms/step - loss: 0.0370 - val_loss: 0.0027\n",
            "Epoch 11/25\n",
            "39/39 [==============================] - 4s 106ms/step - loss: 0.0327 - val_loss: 0.0032\n",
            "Epoch 12/25\n",
            "39/39 [==============================] - 4s 104ms/step - loss: 0.0297 - val_loss: 0.0027\n",
            "Epoch 13/25\n",
            "39/39 [==============================] - 4s 103ms/step - loss: 0.0268 - val_loss: 0.0022\n",
            "Epoch 14/25\n",
            "39/39 [==============================] - 4s 102ms/step - loss: 0.0251 - val_loss: 0.0024\n",
            "Epoch 15/25\n",
            "39/39 [==============================] - 4s 104ms/step - loss: 0.0221 - val_loss: 0.0026\n",
            "Epoch 16/25\n",
            "39/39 [==============================] - 4s 106ms/step - loss: 0.0196 - val_loss: 0.0018\n",
            "Epoch 17/25\n",
            "39/39 [==============================] - 4s 104ms/step - loss: 0.0183 - val_loss: 0.0042\n",
            "Epoch 18/25\n",
            "39/39 [==============================] - 4s 105ms/step - loss: 0.0170 - val_loss: 0.0014\n",
            "Epoch 19/25\n",
            "39/39 [==============================] - 4s 105ms/step - loss: 0.0158 - val_loss: 0.0015\n",
            "Epoch 20/25\n",
            "39/39 [==============================] - 4s 104ms/step - loss: 0.0149 - val_loss: 0.0012\n",
            "Epoch 21/25\n",
            "39/39 [==============================] - 4s 106ms/step - loss: 0.0141 - val_loss: 0.0026\n",
            "Epoch 22/25\n",
            "39/39 [==============================] - 4s 106ms/step - loss: 0.0134 - val_loss: 0.0018\n",
            "Epoch 23/25\n",
            "39/39 [==============================] - 4s 103ms/step - loss: 0.0134 - val_loss: 0.0014\n",
            "Epoch 24/25\n",
            "39/39 [==============================] - 4s 105ms/step - loss: 0.0115 - val_loss: 0.0019\n",
            "Epoch 25/25\n",
            "39/39 [==============================] - 4s 105ms/step - loss: 0.0103 - val_loss: 0.0016\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Training Procedure"
      ],
      "metadata": {
        "id": "7ujTaO2jXD38"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.subplots(figsize = (20,5))\n",
        "plt.plot(np.arange(epoch), history.history[\"loss\"], label=\"Training MAE Loss\")\n",
        "plt.plot(np.arange(epoch), history.history[\"val_loss\"], label=\"Validation MAE Loss\")\n",
        "plt.xlabel(\"# Epoch\")\n",
        "plt.ylabel(\"MAE Loss\")\n",
        "plt.title(\"Loss\")\n",
        "plt.legend(loc=\"best\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "lFul24sMXD39",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "outputId": "21058ee5-05f3-400d-af14-effe4bc25e25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Inference Result"
      ],
      "metadata": {
        "id": "lDaQGJfLXD39"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "yPred = model.predict(xTest)"
      ],
      "metadata": {
        "id": "C6LNU0nLXD3-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fda8714f-6789-4d7e-a418-3488d4d60e01"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "311/311 [==============================] - 2s 7ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "yPred.shape"
      ],
      "metadata": {
        "id": "MDHidWGeXD3-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "785183cd-d836-415c-dbe3-4d6cd5fe9e19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(9945, 50)"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Result"
      ],
      "metadata": {
        "id": "ggrmh54mXD3-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.subplots(figsize = (20,5))\n",
        "plt.scatter(np.arange(numInput), xTest[-1].reshape(-1), label=\"Input\", marker=\".\")\n",
        "plt.scatter(np.arange(numInput, numInput+numOutput), yTest[-1].reshape(-1), label=\"Ground Truth\", marker=\"x\")\n",
        "plt.scatter(np.arange(numInput, numInput+numOutput), yPred[-1].reshape(-1), label=\"Prediction\", marker=\"^\")\n",
        "plt.xlabel(\"Time Step (1e-2s)\")\n",
        "plt.ylabel(\"Displacement (m)\")\n",
        "plt.title(\"Result Comparison\")\n",
        "plt.legend(loc=\"best\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "apmyKn9PXD3_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "outputId": "ed4a1b10-cde5-4cf3-86b9-04ea22682934"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Model Evaluation"
      ],
      "metadata": {
        "id": "Rj-2yIycXD3_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "computeMAE(yPred, yTest)"
      ],
      "metadata": {
        "id": "CXtDiUqZXD4A",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "19b681e1-3adf-476e-9b2f-be80cecc1050"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0014888116003982312"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## GRU with L2 Regularization"
      ],
      "metadata": {
        "id": "33JM0ClFn833"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "K.clear_session()\n",
        "fixSeed()\n",
        "\n",
        "model = keras.Sequential()\n",
        "\n",
        "model.add(keras.layers.GRU(50, \n",
        "                           input_shape=(numInput, 1), \n",
        "                           kernel_regularizer=\"l2\", \n",
        "                           recurrent_regularizer=\"l2\",\n",
        "                           bias_regularizer=\"l2\"))\n",
        "model.add(keras.layers.Dense(numOutput))"
      ],
      "metadata": {
        "id": "pHvWfpf-mi1i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Summarize Model"
      ],
      "metadata": {
        "id": "9kKabtBto0vX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "id": "pKEq8p5vo0vX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "02f47929-e850-474a-bba2-5e59147f18d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " gru (GRU)                   (None, 50)                7950      \n",
            "                                                                 \n",
            " dense (Dense)               (None, 50)                2550      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 10,500\n",
            "Trainable params: 10,500\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Model"
      ],
      "metadata": {
        "id": "xgmB78pNo0vY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plot_model(model, to_file=\"model.png\")"
      ],
      "metadata": {
        "id": "2Rq--tSMo0vY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "outputId": "f54b0077-ea7a-41df-99ab-6024f6791341"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Compile Model"
      ],
      "metadata": {
        "id": "2eauQ4x0o0vY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lr, batchSize, epoch = 1e-3, 2048, 25"
      ],
      "metadata": {
        "id": "QXyW7IfSo0vY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss=\"mean_absolute_error\", optimizer=keras.optimizers.Adam(learning_rate=lr))"
      ],
      "metadata": {
        "id": "B4WMQ1Poo0vY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train Model"
      ],
      "metadata": {
        "id": "Gd6Z6JjMo0vY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(xTrain, yTrain, batch_size=batchSize, epochs=epoch, validation_data=(xValid, yValid))"
      ],
      "metadata": {
        "id": "_egOH-CKo0vZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "12de9895-fa1c-4aaa-9410-707db183aec1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/25\n",
            "39/39 [==============================] - 6s 117ms/step - loss: 0.5225 - val_loss: 0.0517\n",
            "Epoch 2/25\n",
            "39/39 [==============================] - 4s 103ms/step - loss: 0.0972 - val_loss: 0.0286\n",
            "Epoch 3/25\n",
            "39/39 [==============================] - 4s 101ms/step - loss: 0.0824 - val_loss: 0.0390\n",
            "Epoch 4/25\n",
            "39/39 [==============================] - 4s 101ms/step - loss: 0.0730 - val_loss: 0.0274\n",
            "Epoch 5/25\n",
            "39/39 [==============================] - 4s 104ms/step - loss: 0.0655 - val_loss: 0.0162\n",
            "Epoch 6/25\n",
            "39/39 [==============================] - 4s 103ms/step - loss: 0.0659 - val_loss: 0.0129\n",
            "Epoch 7/25\n",
            "39/39 [==============================] - 4s 104ms/step - loss: 0.0640 - val_loss: 0.0325\n",
            "Epoch 8/25\n",
            "39/39 [==============================] - 4s 103ms/step - loss: 0.0622 - val_loss: 0.0252\n",
            "Epoch 9/25\n",
            "39/39 [==============================] - 4s 104ms/step - loss: 0.0621 - val_loss: 0.0185\n",
            "Epoch 10/25\n",
            "39/39 [==============================] - 4s 103ms/step - loss: 0.0586 - val_loss: 0.0229\n",
            "Epoch 11/25\n",
            "39/39 [==============================] - 4s 103ms/step - loss: 0.0576 - val_loss: 0.0112\n",
            "Epoch 12/25\n",
            "39/39 [==============================] - 4s 106ms/step - loss: 0.0557 - val_loss: 0.0124\n",
            "Epoch 13/25\n",
            "39/39 [==============================] - 4s 103ms/step - loss: 0.0558 - val_loss: 0.0115\n",
            "Epoch 14/25\n",
            "39/39 [==============================] - 4s 103ms/step - loss: 0.0546 - val_loss: 0.0148\n",
            "Epoch 15/25\n",
            "39/39 [==============================] - 4s 102ms/step - loss: 0.0546 - val_loss: 0.0262\n",
            "Epoch 16/25\n",
            "39/39 [==============================] - 4s 102ms/step - loss: 0.0571 - val_loss: 0.0100\n",
            "Epoch 17/25\n",
            "39/39 [==============================] - 4s 102ms/step - loss: 0.0566 - val_loss: 0.0108\n",
            "Epoch 18/25\n",
            "39/39 [==============================] - 4s 101ms/step - loss: 0.0544 - val_loss: 0.0162\n",
            "Epoch 19/25\n",
            "39/39 [==============================] - 4s 102ms/step - loss: 0.0541 - val_loss: 0.0177\n",
            "Epoch 20/25\n",
            "39/39 [==============================] - 4s 101ms/step - loss: 0.0518 - val_loss: 0.0122\n",
            "Epoch 21/25\n",
            "39/39 [==============================] - 4s 99ms/step - loss: 0.0544 - val_loss: 0.0090\n",
            "Epoch 22/25\n",
            "39/39 [==============================] - 4s 101ms/step - loss: 0.0526 - val_loss: 0.0180\n",
            "Epoch 23/25\n",
            "39/39 [==============================] - 4s 103ms/step - loss: 0.0527 - val_loss: 0.0153\n",
            "Epoch 24/25\n",
            "39/39 [==============================] - 4s 103ms/step - loss: 0.0544 - val_loss: 0.0099\n",
            "Epoch 25/25\n",
            "39/39 [==============================] - 4s 103ms/step - loss: 0.0610 - val_loss: 0.0151\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Training Procedure"
      ],
      "metadata": {
        "id": "DwK2TRmUo0vZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.subplots(figsize = (20,5))\n",
        "plt.plot(np.arange(epoch), history.history[\"loss\"], label=\"Training MAE Loss\")\n",
        "plt.plot(np.arange(epoch), history.history[\"val_loss\"], label=\"Validation MAE Loss\")\n",
        "plt.xlabel(\"# Epoch\")\n",
        "plt.ylabel(\"MAE Loss\")\n",
        "plt.title(\"Loss\")\n",
        "plt.legend(loc=\"best\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "3k2IODR3o0vZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "outputId": "cc801b19-c97b-4e8f-b2bb-54e25cdde272"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Inference Result"
      ],
      "metadata": {
        "id": "KrbIouMXo0vZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "yPred = model.predict(xTest)"
      ],
      "metadata": {
        "id": "Wb2SCoq8o0vZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "12380427-9636-4526-c567-89418509c0ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "311/311 [==============================] - 3s 7ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "yPred.shape"
      ],
      "metadata": {
        "id": "BbOgTquco0vZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "02d757cf-04cc-41f6-a190-15d798620f42"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(9945, 50)"
            ]
          },
          "metadata": {},
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Visualize Result"
      ],
      "metadata": {
        "id": "qZ4r-lpHo0va"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.subplots(figsize = (20,5))\n",
        "plt.scatter(np.arange(numInput), xTest[-1].reshape(-1), label=\"Input\", marker=\".\")\n",
        "plt.scatter(np.arange(numInput, numInput+numOutput), yTest[-1].reshape(-1), label=\"Ground Truth\", marker=\"x\")\n",
        "plt.scatter(np.arange(numInput, numInput+numOutput), yPred[-1].reshape(-1), label=\"Prediction\", marker=\"^\")\n",
        "plt.xlabel(\"Time Step (1e-2s)\")\n",
        "plt.ylabel(\"Displacement (m)\")\n",
        "plt.title(\"Result Comparison\")\n",
        "plt.legend(loc=\"best\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "PsQxVxoFo0va",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "outputId": "237f0900-ae31-4186-f227-a1e36c6e9edb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Model Evaluation"
      ],
      "metadata": {
        "id": "7vu60Uk6o0va"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "computeMAE(yPred, yTest)"
      ],
      "metadata": {
        "id": "zpk_IvzCo0va",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "29452ddb-9887-4db0-ca7c-2515e0c9cf5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.00835036588394002"
            ]
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    }
  ]
}